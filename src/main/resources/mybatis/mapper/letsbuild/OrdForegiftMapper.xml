<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.letsbuild.dao.mapper.interfaces.OrdForegiftMapper" >
  <resultMap id="BaseResultMap" type="com.letsbuild.dao.mapper.bo.OrdForegift" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="order_id" property="orderId" jdbcType="BIGINT" />
    <result column="amount" property="amount" jdbcType="DOUBLE" />
    <result column="plan_return_time" property="planReturnTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="pay_time" property="payTime" jdbcType="TIMESTAMP" />
    <result column="pay_mode" property="payMode" jdbcType="CHAR" />
    <result column="pay_user" property="payUser" jdbcType="BIGINT" />
    <result column="with_receipt" property="withReceipt" jdbcType="CHAR" />
    <result column="cut_amount" property="cutAmount" jdbcType="DOUBLE" />
    <result column="unable_amount" property="unableAmount" jdbcType="DOUBLE" />
    <result column="back_time" property="backTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="CHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, order_id, amount, plan_return_time, create_time, pay_time, pay_mode, pay_user, 
    with_receipt, cut_amount, unable_amount, back_time, status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.letsbuild.dao.mapper.bo.OrdForegiftCriteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ord_foregift
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="Long" >
    select 
    <include refid="Base_Column_List" />
    from ord_foregift
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="Long" >
    delete from ord_foregift
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.letsbuild.dao.mapper.bo.OrdForegiftCriteria" >
    delete from ord_foregift
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.letsbuild.dao.mapper.bo.OrdForegift" >
    insert into ord_foregift (id, order_id, amount, 
      plan_return_time, create_time, pay_time, 
      pay_mode, pay_user, with_receipt, 
      cut_amount, unable_amount, back_time, 
      status)
    values (#{id,jdbcType=BIGINT}, #{orderId,jdbcType=BIGINT}, #{amount,jdbcType=DOUBLE}, 
      #{planReturnTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, #{payTime,jdbcType=TIMESTAMP}, 
      #{payMode,jdbcType=CHAR}, #{payUser,jdbcType=BIGINT}, #{withReceipt,jdbcType=CHAR}, 
      #{cutAmount,jdbcType=DOUBLE}, #{unableAmount,jdbcType=DOUBLE}, #{backTime,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.letsbuild.dao.mapper.bo.OrdForegift" >
    insert into ord_foregift
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="planReturnTime != null" >
        plan_return_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="payTime != null" >
        pay_time,
      </if>
      <if test="payMode != null" >
        pay_mode,
      </if>
      <if test="payUser != null" >
        pay_user,
      </if>
      <if test="withReceipt != null" >
        with_receipt,
      </if>
      <if test="cutAmount != null" >
        cut_amount,
      </if>
      <if test="unableAmount != null" >
        unable_amount,
      </if>
      <if test="backTime != null" >
        back_time,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DOUBLE},
      </if>
      <if test="planReturnTime != null" >
        #{planReturnTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payTime != null" >
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payMode != null" >
        #{payMode,jdbcType=CHAR},
      </if>
      <if test="payUser != null" >
        #{payUser,jdbcType=BIGINT},
      </if>
      <if test="withReceipt != null" >
        #{withReceipt,jdbcType=CHAR},
      </if>
      <if test="cutAmount != null" >
        #{cutAmount,jdbcType=DOUBLE},
      </if>
      <if test="unableAmount != null" >
        #{unableAmount,jdbcType=DOUBLE},
      </if>
      <if test="backTime != null" >
        #{backTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.letsbuild.dao.mapper.bo.OrdForegiftCriteria" resultType="java.lang.Integer" >
    select count(*) from ord_foregift
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update ord_foregift
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=DOUBLE},
      </if>
      <if test="record.planReturnTime != null" >
        plan_return_time = #{record.planReturnTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payTime != null" >
        pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payMode != null" >
        pay_mode = #{record.payMode,jdbcType=CHAR},
      </if>
      <if test="record.payUser != null" >
        pay_user = #{record.payUser,jdbcType=BIGINT},
      </if>
      <if test="record.withReceipt != null" >
        with_receipt = #{record.withReceipt,jdbcType=CHAR},
      </if>
      <if test="record.cutAmount != null" >
        cut_amount = #{record.cutAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.unableAmount != null" >
        unable_amount = #{record.unableAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.backTime != null" >
        back_time = #{record.backTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update ord_foregift
    set id = #{record.id,jdbcType=BIGINT},
      order_id = #{record.orderId,jdbcType=BIGINT},
      amount = #{record.amount,jdbcType=DOUBLE},
      plan_return_time = #{record.planReturnTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      pay_mode = #{record.payMode,jdbcType=CHAR},
      pay_user = #{record.payUser,jdbcType=BIGINT},
      with_receipt = #{record.withReceipt,jdbcType=CHAR},
      cut_amount = #{record.cutAmount,jdbcType=DOUBLE},
      unable_amount = #{record.unableAmount,jdbcType=DOUBLE},
      back_time = #{record.backTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.letsbuild.dao.mapper.bo.OrdForegift" >
    update ord_foregift
    <set >
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=BIGINT},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DOUBLE},
      </if>
      <if test="planReturnTime != null" >
        plan_return_time = #{planReturnTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payTime != null" >
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payMode != null" >
        pay_mode = #{payMode,jdbcType=CHAR},
      </if>
      <if test="payUser != null" >
        pay_user = #{payUser,jdbcType=BIGINT},
      </if>
      <if test="withReceipt != null" >
        with_receipt = #{withReceipt,jdbcType=CHAR},
      </if>
      <if test="cutAmount != null" >
        cut_amount = #{cutAmount,jdbcType=DOUBLE},
      </if>
      <if test="unableAmount != null" >
        unable_amount = #{unableAmount,jdbcType=DOUBLE},
      </if>
      <if test="backTime != null" >
        back_time = #{backTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.letsbuild.dao.mapper.bo.OrdForegift" >
    update ord_foregift
    set order_id = #{orderId,jdbcType=BIGINT},
      amount = #{amount,jdbcType=DOUBLE},
      plan_return_time = #{planReturnTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      pay_mode = #{payMode,jdbcType=CHAR},
      pay_user = #{payUser,jdbcType=BIGINT},
      with_receipt = #{withReceipt,jdbcType=CHAR},
      cut_amount = #{cutAmount,jdbcType=DOUBLE},
      unable_amount = #{unableAmount,jdbcType=DOUBLE},
      back_time = #{backTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=CHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>